{"version":3,"sources":["index.js"],"names":["JavascriptTimeAgo","addDefaultLocale","en","allowedTags","Resources","useState","data","setData","useEffect","fetch","then","res","json","catch","console","error","legend","taxonomy_legend","resources","map","resource","milliseconds","timestamp","dateString","Date","toLocaleDateString","strippedHTML","striptags","body","key","nid","title","className","dangerouslySetInnerHTML","__html","href","date","links","link","btoa","url","target","attributes","files","file","fid","language","filemime","fileSize","filesize","base","taxonomies","taxon","vid","machine_name","terms","tid","termData","name","App","ReactDOM","render","document","getElementById"],"mappings":"6NAeAA,IAAkBC,iBAAiBC,GACnC,IAAMC,EAAc,CAAC,IAAI,SAAS,IAAI,IAAI,KAAK,KAAK,KAEpD,SAASC,IAAa,IAAD,EACOC,mBAAS,MADhB,mBACVC,EADU,KACJC,EADI,KASjB,GAPAC,qBAAU,WACNC,MAAM,mEACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,KAAKH,GACLM,MAAMC,QAAQC,SACpB,IAECT,EAAM,CACN,IAAMU,EAASV,EAAKW,gBAGpB,OACI,6BACI,yCACCX,EAAKY,UAAUC,KAAI,SAACC,GAEjB,IAAMC,EAAoC,IAArBD,EAASE,UACxBC,EAAa,IAAIC,KAAKH,GAAcI,qBACpCC,EAAeC,IAAUP,EAASQ,KAAMzB,GAC9C,OACI,yBAAK0B,IAAKT,EAASU,KACf,4BAAKV,EAASW,OACd,yBAAKC,UAAU,OAAOC,wBAAyB,CAACC,OAAQR,KACxD,4BACI,oCAAS,uBAAGS,KAAM,yBAA2Bf,EAASU,IAAM,SAAUV,EAASU,MAE/E,8CACoBP,EADpB,KACiC,kBAAC,IAAD,CAC7Ba,KAAMf,IAFV,KAIA,qCAEI,4BACKD,EAASiB,OACVjB,EAASiB,MAAMlB,KAAI,SAACmB,GAAD,OACf,wBAAIT,IAAKU,KAAKD,EAAKE,MACf,uBAAGL,KAAMG,EAAKE,IACXC,OAAQH,EAAKI,WAAWD,QAAU,SAAUH,EAAKP,aAKpE,qCAEI,4BACKX,EAASuB,OACVvB,EAASuB,MAAMxB,KAAI,SAACyB,GAAD,OACf,wBAAIf,IAAKe,EAAKC,KACV,uBAAGV,KAAMS,EAAKJ,KAAMI,EAAKE,UAD7B,IAC4CF,EAAKG,SAAU,IACtDC,IAASJ,EAAKK,SAAU,CAACC,KAAM,WAMhD,0CAEK9B,EAAS+B,YACV/B,EAAS+B,WAAWhC,KAAI,SAACiC,GACrB,OACIA,EAAMC,IAAM,GACR,wBAAIxB,IAAKuB,EAAMC,KACX,4BAAKD,EAAMC,IAAX,KAAkBrC,EAAOoC,EAAMC,KAAKC,aAApC,KACA,4BACKF,EAAMG,MAAMpC,KAAI,SAACqC,GACd,IAAMC,EAAWzC,EAAOoC,EAAMC,KAAKE,MAAMC,GACzC,OACI,wBAAI3B,IAAK2B,GAAMA,EAAf,KAAsBC,GAAYA,EAASC,qBAgBnG,OAAO,KAIf,SAASC,IACL,OAAO,kBAACvD,EAAD,MAGXwD,IAASC,OAAO,kBAACF,EAAD,MAAQG,SAASC,eAAe,U","file":"static/js/main.5bd8ba4e.chunk.js","sourcesContent":["import \"./index.css\";\n\nimport React, {useState, useEffect} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport fileSize from \"filesize\";\n\n// Relative time, like \"Updated 5 months ago\"\nimport JavascriptTimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en\";\nimport ReactTimeAgo from \"react-time-ago\";\n\n\n// For getting rid of pesky span, font, etc. tags\nimport striptags from \"striptags\";\n\nJavascriptTimeAgo.addDefaultLocale(en);\nconst allowedTags = ['b','strong','p','i','em','br','a'];\n\nfunction Resources() {\n    const [data, setData] = useState(null);\n    useEffect(() => {\n        fetch(`https://tfm-apiv2-field-museum1.pantheonsite.io/apiv2/resources`)\n            .then((res) => res.json())\n            .then(setData)\n            .catch(console.error);\n    }, []);\n\n    if (data) {\n        const legend = data.taxonomy_legend;\n\n\n        return (\n            <div>\n                <h1>Resources</h1>\n                {data.resources.map((resource) => {\n\n                    const milliseconds = resource.timestamp * 1000;\n                    const dateString = new Date(milliseconds).toLocaleDateString();\n                    const strippedHTML = striptags(resource.body, allowedTags);\n                    return (\n                        <div key={resource.nid}>\n                            <h2>{resource.title}</h2>\n                            <div className=\"body\" dangerouslySetInnerHTML={{__html: strippedHTML }}/>\n                            <ul>\n                                <li>NID: <a href={\"http://localhost/node/\" + resource.nid + \"/edit\"}>{resource.nid}</a>\n                                </li>\n                                <li>\n                                    Last modified: {dateString} (<ReactTimeAgo\n                                    date={milliseconds}/>)\n                                </li>\n                                <li>\n                                    Links:\n                                    <ul>\n                                        {resource.links &&\n                                        resource.links.map((link) => (\n                                            <li key={btoa(link.url)}>\n                                                <a href={link.url}\n                                                   target={link.attributes.target || '_self'}>{link.title}</a>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                </li>\n                                <li>\n                                    Files:\n                                    <ul>\n                                        {resource.files &&\n                                        resource.files.map((file) => (\n                                            <li key={file.fid}>\n                                                <a href={file.url}>{file.language}</a> {file.filemime}{\" \"}\n                                                {fileSize(file.filesize, {base: 10})}\n                                            </li>\n                                        ))}\n                                    </ul>\n                                </li>\n\n                                <li>\n                                    Taxonomies:\n                                    {resource.taxonomies &&\n                                    resource.taxonomies.map((taxon) => {\n                                        return (\n                                            taxon.vid > 0 && (\n                                                <ul key={taxon.vid}>\n                                                    <li>{taxon.vid}: {legend[taxon.vid].machine_name} </li>\n                                                    <ul>\n                                                        {taxon.terms.map((tid) => {\n                                                            const termData = legend[taxon.vid].terms[tid];\n                                                            return (\n                                                                <li key={tid}>{tid}: {termData && termData.name}</li>\n                                                            );\n                                                        })}\n                                                    </ul>\n                                                </ul>\n                                            )\n                                        );\n                                    })}\n                                </li>\n                            </ul>\n                        </div>\n                    )\n                })}\n            </div>\n        );\n    } else {\n        return null;\n    }\n}\n\nfunction App() {\n    return <Resources/>;\n}\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n"],"sourceRoot":""}
{"version":3,"sources":["index.js"],"names":["JavascriptTimeAgo","addDefaultLocale","en","allowedTags","Resources","useState","fallbackData","data","setData","getD7","fetch","then","res","json","catch","console","error","useEffect","taxonomy_legend","onClick","className","resources","map","resource","milliseconds","timestamp","dateString","Date","toLocaleDateString","strippedHTML","striptags","body","key","nid","title","dangerouslySetInnerHTML","__html","href","date","links","link","btoa","url","files","file","fid","language","filemime","fileSize","filesize","base","App","ReactDOM","render","document","getElementById"],"mappings":"qOAcAA,IAAkBC,iBAAiBC,GACnC,IAAMC,EAAc,CAAC,IAAK,SAAU,IAAK,IAAK,KAAM,KAAM,KAE1D,SAASC,IAAa,IAAD,EACOC,mBAASC,GADhB,mBACVC,EADU,KACJC,EADI,KAOjB,SAASC,IACLC,MAAM,mEACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,KAAKH,GACLM,MAAMC,QAAQC,OAUvB,GAlBAC,qBAAU,WACNR,MACD,IAgBCF,EAAM,CACSA,EAAKW,gBACpB,OACI,kBAAC,WAAD,KACA,4BAAQC,QAASV,GAAjB,oBACA,4BAAQU,QAZhB,WACIT,MAAM,0BACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,KAAKH,GACLM,MAAMC,QAAQC,SAQf,oBACA,yBAAKI,UAAU,aACX,yCACCb,EAAKc,UAAUC,KAAI,SAACC,GAEjB,IAAMC,EAAoC,IAArBD,EAASE,UACxBC,EAAa,IAAIC,KAAKH,GAAcI,qBACpCC,EAAeC,IAAUP,EAASQ,KAAM5B,GAC9C,OACI,yBAAK6B,IAAKT,EAASU,KACf,4BAAKV,EAASW,OACd,yBAAKd,UAAU,OAAOe,wBAAyB,CAACC,OAAQP,KACxD,4BACI,oCAAS,uBAAGQ,KAAM,yBAA2Bd,EAASU,IAAM,SAAUV,EAASU,MAE/E,8CACoBP,EADpB,KACiC,kBAAC,IAAD,CAC7BY,KAAMd,IAFV,KAIA,qCAEI,4BACKD,EAASgB,OACVhB,EAASgB,MAAMjB,KAAI,SAACkB,GAAD,OACf,wBAAIR,IAAKS,KAAKD,EAAKE,MACf,uBAAGL,KAAMG,EAAKE,KAAMF,EAAKN,aAKzC,qCAEI,4BACKX,EAASoB,OACVpB,EAASoB,MAAMrB,KAAI,SAACsB,GAAD,OACf,wBAAIZ,IAAKY,EAAKC,KACV,uBAAGR,KAAMO,EAAKF,KAAME,EAAKE,UAD7B,IAC4CF,EAAKG,SAAU,IACtDC,IAASJ,EAAKK,SAAU,CAACC,KAAM,kBAmCxE,OAAO,KAIf,IAAMC,EAAM,WACR,OAAO,kBAAC/C,EAAD,OAGXgD,IAASC,OAAO,kBAACF,EAAD,MAAQG,SAASC,eAAe,U","file":"static/js/main.47941aed.chunk.js","sourcesContent":["import \"./index.css\";\n\nimport React, {useState, useEffect, Fragment} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport fileSize from \"filesize\";\nimport striptags from \"striptags\"; // For getting rid of pesky span, font, etc. tags\nimport fallbackData from \"./data/1-22-2021.json\";\n\n// Relative time, like \"Updated 5 months ago\"\nimport JavascriptTimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en\";\nimport ReactTimeAgo from \"react-time-ago\";\n\n\nJavascriptTimeAgo.addDefaultLocale(en);\nconst allowedTags = ['b', 'strong', 'p', 'i', 'em', 'br', 'a'];\n\nfunction Resources() {\n    const [data, setData] = useState(fallbackData);\n\n    useEffect(() => {\n        getD7();\n    }, []);\n\n    function getD7() {\n        fetch('https://tfm-apiv2-field-museum1.pantheonsite.io/apiv2/resources')\n            .then((res) => res.json())\n            .then(setData)\n            .catch(console.error);\n    }\n\n    function getD9() {\n        fetch('http://127.0.0.1:8787/')\n            .then((res) => res.json())\n            .then(setData)\n            .catch(console.error);\n    }\n\n    if (data) {\n        const legend = data.taxonomy_legend;\n        return (\n            <Fragment>\n            <button onClick={getD7}>Get D7 Resources</button>\n            <button onClick={getD9}>Get D9 Resources</button>\n            <div className=\"resources\">\n                <h1>Resources</h1>\n                {data.resources.map((resource) => {\n\n                    const milliseconds = resource.timestamp * 1000;\n                    const dateString = new Date(milliseconds).toLocaleDateString();\n                    const strippedHTML = striptags(resource.body, allowedTags);\n                    return (\n                        <div key={resource.nid}>\n                            <h2>{resource.title}</h2>\n                            <div className=\"body\" dangerouslySetInnerHTML={{__html: strippedHTML}}/>\n                            <ul>\n                                <li>NID: <a href={\"http://localhost/node/\" + resource.nid + \"/edit\"}>{resource.nid}</a>\n                                </li>\n                                <li>\n                                    Last modified: {dateString} (<ReactTimeAgo\n                                    date={milliseconds}/>)\n                                </li>\n                                <li>\n                                    Links:\n                                    <ul>\n                                        {resource.links &&\n                                        resource.links.map((link) => (\n                                            <li key={btoa(link.url)}>\n                                                <a href={link.url}>{link.title}</a>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                </li>\n                                <li>\n                                    Files:\n                                    <ul>\n                                        {resource.files &&\n                                        resource.files.map((file) => (\n                                            <li key={file.fid}>\n                                                <a href={file.url}>{file.language}</a> {file.filemime}{\" \"}\n                                                {fileSize(file.filesize, {base: 10})}\n                                            </li>\n                                        ))}\n                                    </ul>\n                                </li>\n\n                                {/*<li>*/}\n                                {/*    Taxonomies:*/}\n                                {/*    {resource.taxonomies &&*/}\n                                {/*    resource.taxonomies.map((taxon) => {*/}\n                                {/*        return (*/}\n                                {/*            taxon.vid > 0 && (*/}\n                                {/*                <ul key={taxon.vid}>*/}\n                                {/*                    <li>{taxon.vid}: {legend[taxon.vid].machine_name} </li>*/}\n                                {/*                    <ul>*/}\n                                {/*                        {taxon.terms.map((tid) => {*/}\n                                {/*                            const termData = legend[taxon.vid].terms[tid];*/}\n                                {/*                            return (*/}\n                                {/*                                <li key={tid}>{tid}: {termData && termData.name}</li>*/}\n                                {/*                            );*/}\n                                {/*                        })}*/}\n                                {/*                    </ul>*/}\n                                {/*                </ul>*/}\n                                {/*            )*/}\n                                {/*        );*/}\n                                {/*    })}*/}\n                                {/*</li>*/}\n                            </ul>\n                        </div>\n                    )\n                })}\n            </div>\n            </Fragment>\n        );\n    } else {\n        return null;\n    }\n}\n\nconst App = () => {\n    return <Resources/>;\n}\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n"],"sourceRoot":""}